////////////////////////////////////////////////////////////////////////////////
// Rendering/UIShaders.cpp (Leggiero/Modules - LegacyUI)
//
// Shader Source Code for UI Shader Programs
////////////////////////////////////////////////////////////////////////////////

// My Header
#include "UIShaders.h"


namespace Leggiero
{
	namespace LUI
	{
		namespace Shaders
		{
			//////////////////////////////////////////////////////////////////////////////// UIColorPrimitiveShader

			//------------------------------------------------------------------------------
			// Vertex Shader
			const char *UIColorPrimitiveShader::s_sourceVert = 
				"uniform mat4 u_ModelMatrix;\n"
				"uniform mat4 u_ViewMatrix;\n"
				"uniform mat4 u_ProjMatrix;\n"
				"\n"
				"attribute vec4 a_Position;\n"
				"attribute vec4 a_SourceColor;\n"
				"\n"
				"varying vec4 DestinationColor;\n"
				"\n"
				"void main()\n"
				"{\n"
				"	vec4 worldPosition = u_ModelMatrix * a_Position;\n"
				"	gl_Position = u_ProjMatrix * u_ViewMatrix * worldPosition;\n"
				"\n"
				"	DestinationColor = a_SourceColor;\n"
				"}\n"
				;

			//------------------------------------------------------------------------------
			// Fragment Shader
			const char *UIColorPrimitiveShader::s_sourceFrag = 
				"varying lowp vec4 DestinationColor;\n"
				"\n"
				"uniform lowp float u_hslModify[5];\n"
				"\n"
				"lowp vec3 rgb2hsv(lowp vec3 c)\n"
				"{\n"
				"	mediump vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n"
				"	mediump vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n"
				"	mediump vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n"
				"\n"
				"	mediump float d = q.x - min(q.w, q.y);\n"
				"	mediump float e = 1.0e-10;\n"
				"	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n"
				"}\n"
				"\n"
				"lowp vec3 hsv2rgb(lowp vec3 c)\n"
				"{\n"
				"	mediump vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n"
				"	mediump vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n"
				"	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n"
				"}\n"
				"\n"
				"lowp vec3 rgb2hsl(lowp vec3 c)\n"
				"{\n"
				"	lowp vec3 hsv = rgb2hsv(c);\n"
				"	mediump float l = (2.0 - hsv.y) * hsv.z;\n"
				"	return vec3(hsv.x, hsv.y * hsv.z / ((l < 1.0) ? l : (2.0 - l)), l / 2.0);\n"
				"}\n"
				"\n"
				"lowp vec3 hsl2rgb(lowp vec3 c)\n"
				"{\n"
				"	mediump float s = c.y * ((c.z < 0.5) ? c.z : (1.0 - c.z));\n"
				"	lowp vec3 hsv = vec3(c.x, 2.0 * s / (c.z + s), c.z + s);\n"
				"	return hsv2rgb(hsv);\n"
				"}\n"
				"\n"
				"lowp vec3 ApplyHSLAdjustment(lowp vec3 color, lowp float colorModify[5])\n"
				"{\n"
				"	mediump float e = 0.0001;\n"
				"	if (abs(colorModify[0]) < e && abs(colorModify[1] - 1.0) < e && abs(colorModify[2]) < e && abs(colorModify[3] - 1.0) < e && abs(colorModify[4]) < e)\n"
				"	{\n"
				"		return color;\n"
				"	}\n"
				"	lowp vec3 hsl = rgb2hsl(color);\n"
				"	return hsl2rgb(vec3(mod(hsl.x + colorModify[0], 1.0), clamp(hsl.y * colorModify[1] + colorModify[2], 0.0, 1.0), clamp(hsl.z * colorModify[3] + colorModify[4], 0.0, 1.0)));\n"
				"}\n"
				"\n"
				"void main()\n"
				"{\n"
				"	gl_FragColor = vec4(ApplyHSLAdjustment(DestinationColor.xyz, u_hslModify), DestinationColor.w);\n"
				"}\n"
				;


			//////////////////////////////////////////////////////////////////////////////// UITextureColorShader

			//------------------------------------------------------------------------------
			// Vertex Shader
			const char *UITextureColorShader::s_sourceVert = 
				"uniform mat4 u_ModelMatrix;\n"
				"uniform mat4 u_ViewMatrix;\n"
				"uniform mat4 u_ProjMatrix;\n"
				"\n"
				"attribute vec4 a_Position;\n"
				"attribute vec4 a_SourceColor;\n"
				"attribute vec2 a_TextureUV0;\n"
				"\n"
				"varying vec4 DestinationColor;\n"
				"varying vec2 TextureUV0;\n"
				"\n"
				"void main()\n"
				"{\n"
				"	vec4 worldPosition = u_ModelMatrix * a_Position;\n"
				"	gl_Position = u_ProjMatrix * u_ViewMatrix * worldPosition;\n"
				"\n"
				"	DestinationColor = a_SourceColor;\n"
				"	TextureUV0 = a_TextureUV0;\n"
				"}\n"
				;

			//------------------------------------------------------------------------------
			// Fragment Shader
			const char *UITextureColorShader::s_sourceFrag = 
				"varying lowp vec4 DestinationColor;\n"
				"varying mediump vec2 TextureUV0;\n"
				"\n"
				"uniform sampler2D u_Texture0;\n"
				"\n"
				"uniform lowp float u_hslModify[5];\n"
				"\n"
				"lowp vec3 rgb2hsv(lowp vec3 c)\n"
				"{\n"
				"	mediump vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n"
				"	mediump vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n"
				"	mediump vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n"
				"\n"
				"	mediump float d = q.x - min(q.w, q.y);\n"
				"	mediump float e = 1.0e-10;\n"
				"	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n"
				"}\n"
				"\n"
				"lowp vec3 hsv2rgb(lowp vec3 c)\n"
				"{\n"
				"	mediump vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n"
				"	mediump vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n"
				"	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n"
				"}\n"
				"\n"
				"lowp vec3 rgb2hsl(lowp vec3 c)\n"
				"{\n"
				"	lowp vec3 hsv = rgb2hsv(c);\n"
				"	mediump float l = (2.0 - hsv.y) * hsv.z;\n"
				"	return vec3(hsv.x, hsv.y * hsv.z / ((l < 1.0) ? l : (2.0 - l)), l / 2.0);\n"
				"}\n"
				"\n"
				"lowp vec3 hsl2rgb(lowp vec3 c)\n"
				"{\n"
				"	mediump float s = c.y * ((c.z < 0.5) ? c.z : (1.0 - c.z));\n"
				"	lowp vec3 hsv = vec3(c.x, 2.0 * s / (c.z + s), c.z + s);\n"
				"	return hsv2rgb(hsv);\n"
				"}\n"
				"\n"
				"lowp vec3 ApplyHSLAdjustment(lowp vec3 color, lowp float colorModify[5])\n"
				"{\n"
				"	mediump float e = 0.0001;\n"
				"	if (abs(colorModify[0]) < e && abs(colorModify[1] - 1.0) < e && abs(colorModify[2]) < e && abs(colorModify[3] - 1.0) < e && abs(colorModify[4]) < e)\n"
				"	{\n"
				"		return color;\n"
				"	}\n"
				"	lowp vec3 hsl = rgb2hsl(color);\n"
				"	return hsl2rgb(vec3(mod(hsl.x + colorModify[0], 1.0), clamp(hsl.y * colorModify[1] + colorModify[2], 0.0, 1.0), clamp(hsl.z * colorModify[3] + colorModify[4], 0.0, 1.0)));\n"
				"}\n"
				"\n"
				"void main()\n"
				"{\n"
				"	mediump vec4 texture0Color = texture2D(u_Texture0, TextureUV0);\n"
				"	if (DestinationColor.a * texture0Color.a < 0.0001)\n"
				"	{\n"
				"		discard;\n"
				"	}\n"
				"	\n"
				"	lowp vec4 textureColor = DestinationColor * texture0Color;	\n"
				"	gl_FragColor = vec4(ApplyHSLAdjustment(textureColor.xyz, u_hslModify), textureColor.w);\n"
				"}\n"
				;


			//////////////////////////////////////////////////////////////////////////////// UITextureBlurShader

			//------------------------------------------------------------------------------
			// Vertex Shader
			const char *UITextureBlurShader::s_sourceVert = 
				"uniform mat4 u_ModelMatrix;\n"
				"uniform mat4 u_ViewMatrix;\n"
				"uniform mat4 u_ProjMatrix;\n"
				"\n"
				"attribute vec4 a_Position;\n"
				"attribute vec4 a_SourceColor;\n"
				"attribute vec2 a_TextureUV0;\n"
				"\n"
				"varying vec4 DestinationColor;\n"
				"varying vec2 TextureUV0;\n"
				"\n"
				"void main()\n"
				"{\n"
				"	vec4 worldPosition = u_ModelMatrix * a_Position;\n"
				"	gl_Position = u_ProjMatrix * u_ViewMatrix * worldPosition;\n"
				"\n"
				"	DestinationColor = a_SourceColor;\n"
				"	TextureUV0 = a_TextureUV0;\n"
				"}\n"
				;

			//------------------------------------------------------------------------------
			// Fragment Shader
			const char *UITextureBlurShader::s_sourceFrag = 
				"varying lowp vec4 DestinationColor;\n"
				"varying highp vec2 TextureUV0;\n"
				"\n"
				"uniform highp float u_texelWidthOffset;\n"
				"uniform highp float u_texelHeightOffset;\n"
				"\n"
				"uniform sampler2D u_Texture0;\n"
				"\n"
				"uniform lowp float u_hslModify[5];\n"
				"\n"
				"lowp vec3 rgb2hsv(lowp vec3 c)\n"
				"{\n"
				"	mediump vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n"
				"	mediump vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n"
				"	mediump vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n"
				"\n"
				"	mediump float d = q.x - min(q.w, q.y);\n"
				"	mediump float e = 1.0e-10;\n"
				"	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n"
				"}\n"
				"\n"
				"lowp vec3 hsv2rgb(lowp vec3 c)\n"
				"{\n"
				"	mediump vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n"
				"	mediump vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n"
				"	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n"
				"}\n"
				"\n"
				"lowp vec3 rgb2hsl(lowp vec3 c)\n"
				"{\n"
				"	lowp vec3 hsv = rgb2hsv(c);\n"
				"	mediump float l = (2.0 - hsv.y) * hsv.z;\n"
				"	return vec3(hsv.x, hsv.y * hsv.z / ((l < 1.0) ? l : (2.0 - l)), l / 2.0);\n"
				"}\n"
				"\n"
				"lowp vec3 hsl2rgb(lowp vec3 c)\n"
				"{\n"
				"	mediump float s = c.y * ((c.z < 0.5) ? c.z : (1.0 - c.z));\n"
				"	lowp vec3 hsv = vec3(c.x, 2.0 * s / (c.z + s), c.z + s);\n"
				"	return hsv2rgb(hsv);\n"
				"}\n"
				"\n"
				"lowp vec3 ApplyHSLAdjustment(lowp vec3 color, lowp float colorModify[5])\n"
				"{\n"
				"	mediump float e = 0.0001;\n"
				"	if (abs(colorModify[0]) < e && abs(colorModify[1] - 1.0) < e && abs(colorModify[2]) < e && abs(colorModify[3] - 1.0) < e && abs(colorModify[4]) < e)\n"
				"	{\n"
				"		return color;\n"
				"	}\n"
				"	lowp vec3 hsl = rgb2hsl(color);\n"
				"	return hsl2rgb(vec3(mod(hsl.x + colorModify[0], 1.0), clamp(hsl.y * colorModify[1] + colorModify[2], 0.0, 1.0), clamp(hsl.z * colorModify[3] + colorModify[4], 0.0, 1.0)));\n"
				"}\n"
				"\n"
				"void main()\n"
				"{\n"
				"	highp vec2 BlurUV[13];\n"
				"	highp vec2 singleStepOffsetX = vec2(u_texelWidthOffset, 0.0);\n"
				"	highp vec2 singleStepOffsetY = vec2(0.0, u_texelHeightOffset);\n"
				"	BlurUV[0] = TextureUV0;\n"
				"	BlurUV[1] = TextureUV0 + singleStepOffsetX * 1.411764705882353;\n"
				"	BlurUV[2] = TextureUV0 - singleStepOffsetX * 1.411764705882353;\n"
				"	BlurUV[3] = TextureUV0 + singleStepOffsetX * 3.2941176470588234;\n"
				"	BlurUV[4] = TextureUV0 - singleStepOffsetX * 3.2941176470588234;\n"
				"	BlurUV[5] = TextureUV0 + singleStepOffsetX * 5.176470588235294;\n"
				"	BlurUV[6] = TextureUV0 - singleStepOffsetX * 5.176470588235294;\n"
				"	BlurUV[7] = TextureUV0 + singleStepOffsetY * 1.411764705882353;\n"
				"	BlurUV[8] = TextureUV0 - singleStepOffsetY * 1.411764705882353;\n"
				"	BlurUV[9] = TextureUV0 + singleStepOffsetY * 3.2941176470588234;\n"
				"	BlurUV[10] = TextureUV0 - singleStepOffsetY * 3.2941176470588234;\n"
				"	BlurUV[11] = TextureUV0 + singleStepOffsetY * 5.176470588235294;\n"
				"	BlurUV[12] = TextureUV0 - singleStepOffsetY * 5.176470588235294;\n"
				"\n"
				"	mediump vec4 bluredTextureColor = vec4(0.0);\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[0]) * 0.3929651003022808;\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[1]) * 0.2969069646728344;\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[2]) * 0.2969069646728344;\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[3]) * 0.09447039785044732;\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[4]) * 0.09447039785044732;\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[5]) * 0.010381362401148057;\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[6]) * 0.010381362401148057;\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[7]) * 0.2969069646728344;\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[8]) * 0.2969069646728344;\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[9]) * 0.09447039785044732;\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[10]) * 0.09447039785044732;\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[11]) * 0.010381362401148057;\n"
				"	bluredTextureColor += texture2D(u_Texture0, BlurUV[12]) * 0.010381362401148057;\n"
				"	bluredTextureColor *= 0.5;\n"
				"	if (DestinationColor.a * bluredTextureColor.a < 0.0001)\n"
				"	{\n"
				"		discard;\n"
				"	}\n"
				"	\n"
				"	lowp vec4 blurredColor = DestinationColor * bluredTextureColor;	\n"
				"	gl_FragColor = vec4(ApplyHSLAdjustment(blurredColor.xyz, u_hslModify), blurredColor.w);\n"
				"}\n"
				;
		}
	}
}
